<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>馒头馅儿大肉包</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-12-28T09:45:33.929Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>馒头馅儿大肉包</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Shell脚本基础</title>
    <link href="http://example.com/2022/12/28/Shell%E8%84%9A%E6%9C%AC%E5%9F%BA%E7%A1%80/"/>
    <id>http://example.com/2022/12/28/Shell%E8%84%9A%E6%9C%AC%E5%9F%BA%E7%A1%80/</id>
    <published>2022-12-28T09:43:29.000Z</published>
    <updated>2022-12-28T09:45:33.929Z</updated>
    
    <content type="html"><![CDATA[<h2 id="shell脚本创建过程"><a href="#shell脚本创建过程" class="headerlink" title="shell脚本创建过程"></a>shell脚本创建过程</h2><ul><li><p>第一行必须包括shell声明序列 #!</p><p>  #!&#x2F;bin&#x2F;bash</p></li></ul><p>范例:打印hello world</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@ubuntu2004 ~]<span class="comment">#cat /usr/local/bin/hello.sh</span></span><br><span class="line"><span class="comment">#!bin/bash</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;hello world&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;hello world&#x27;</span></span><br></pre></td></tr></table></figure><ul><li><p>增加执行权限:chmod +x命令</p><h2 id="Shell脚本开发的基本规范及习惯"><a href="#Shell脚本开发的基本规范及习惯" class="headerlink" title="Shell脚本开发的基本规范及习惯"></a>Shell脚本开发的基本规范及习惯</h2></li><li><p>Shell脚本的第一行是指定脚本解释器<code>#!/bin/bash</code></p></li><li><p>Shell脚本的开头会加版本、版权等信息,可修改“～&#x2F;.vimrc”配置文件配置vim编辑文件时自动添加</p></li><li><p>在Shell脚本中尽量不用中文（不限于注释）。尽量用英文注释，防止本机或切换系统环境后中文乱码的困扰。如果非要加中文，请根据自身的客户端对系统进行字符集调整，如：export LANG&#x3D;”zh_CN.UTF-8”，并在脚本中，重新定义字符集设置，和系统保持一致</p></li><li><p>Shell脚本应存放在固定的路径下。&#x2F;usr&#x2F; local&#x2F;scr</p></li><li><p>成对的符号应尽量一次性写出来，然后退格在符号里增加内容，以防止遗漏</p></li><li><p>中括号（[]）两端至少要有1个空格，因此，键入中括号时即可留出空格[ ]，然后再退格键入中间的内容，并确保两端都至少有一个空格，即先键入一对中括号，然后退1格，输入两个空格，再退1格，双中括号（[[]]）的写法也是如此。</p></li><li><p>对于流程控制语句，应一次性将格式写完，再添加内容</p></li><li><p>对于常规变量的字符串定义变量值应加双引号，并且等号前后不能有空格，需要强引用的（指所见即所得的字符引用），则用单引号（’ ‘），如果是命令的引用，则用反引号（<code> </code>）</p><h3 id="运行脚本的方法"><a href="#运行脚本的方法" class="headerlink" title="运行脚本的方法:"></a>运行脚本的方法:</h3><p>  #方法一:bash加路径<br>  [root@ubuntu2004 &#x2F;usr&#x2F;local]#bash &#x2F;data&#x2F;hello.sh<br>  hello world<br>  hello world<br>  #方法二:在PATH变量定义过的路径下创建文件<br>  [root@ubuntu2004 &#x2F;usr&#x2F;local&#x2F;bin]#bash hello.sh<br>  hello world<br>  hello world<br>  方法三:用.或者source加载脚本<br>  [11:10:40 root@centos7[ ~]#. test.sh<br>  hello world<br>  hello world</p></li></ul><h2 id="shell脚本调试"><a href="#shell脚本调试" class="headerlink" title="shell脚本调试"></a>shell脚本调试</h2><p>脚本错误:</p><ul><li>语法错误,脚本中后续的命令不再继续执行,bash -n检查</li><li>命令错误,后续的命令会继续执行,用bash -x检查</li><li>逻辑错误,用bash -x检查</li></ul><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>类型</p><ul><li><p>内置环境变量</p></li><li><p>用户自定义变量</p><h3 id="shell中变量命令法则"><a href="#shell中变量命令法则" class="headerlink" title="shell中变量命令法则"></a>shell中变量命令法则</h3></li><li><p>不能使用程序中 的保留字和内置变量</p></li><li><p>只能使用数字,字母,及 下划线且不能以数字开头,不能使用短横线-</p></li><li><p>变量名要大写</p><h3 id="变量定义和引用"><a href="#变量定义和引用" class="headerlink" title="变量定义和引用"></a>变量定义和引用</h3></li><li><p>普通变量:生效范围为当前shell,对当前shell之外的包括子shell进程无效</p></li><li><p>环境变量:生效范围为当前shell及子进程,所有用户下都生效</p></li><li><p>本地变量:当前shell进程中代码片段,函数.</p></li></ul><p>定义:</p><pre><code>直接字串  NAME=&#39;root&#39;变量引用  NAME=&quot;$USER&quot;命令引用  NAME=`cmd`或者name=$(cmd)</code></pre><p>变量引用:</p><pre><code>$name$(name)</code></pre><p>变量追加值:</p><pre><code>[root@ubuntu2004 ~]#wo+=:wang[root@ubuntu2004 ~]#echo $wocto:wang</code></pre><p>显示已定义的所有变量: <code>set</code>删除变量: <code>unset &lt;name&gt;</code></p><h3 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量:"></a>环境变量:</h3><p>脚本中较少使用,声明和赋值:</p><pre><code>export  NAME=VALUE</code></pre><p>显示所有环境变量</p><pre><code>envexport</code></pre><p>环境变量永久生效,写入文件</p><pre><code>/etc/profile   ~/.bash_profile~/.bashrc/etc/bashrc</code></pre><h3 id="只读变量-常量"><a href="#只读变量-常量" class="headerlink" title="只读变量(常量)"></a>只读变量(常量)</h3><p>声明:</p><pre><code>readonly  变量名</code></pre><p>查看:</p><pre><code>readonly  [-p]</code></pre><h3 id="常规普通变量定义总结："><a href="#常规普通变量定义总结：" class="headerlink" title="常规普通变量定义总结："></a>常规普通变量定义总结：</h3><ul><li>若变量内容为连续的数字或字符串，赋值时，变量内容两边可以不加引号，例如a&#x3D;123。</li><li>变量的内容很多时，如果有空格且希望解析内容中的变量，就加双引号，例如a&#x3D;”&#x2F;etc&#x2F;rc.local $USER” ，此时输出变量会对内容中的$USER进行解析然后再输出。</li><li>希望原样输出变量中的内容时就用单引号引起内容进行赋值，例如：a&#x3D;’$USER’。</li><li>希望变量的内容是命令的解析结果的定义及赋值如下：要使用反引号将赋值的命令括起来，例如：a&#x3D;<code>ls</code>；或者用$()括起来，例如：a&#x3D;$(ls)。</li></ul><p>范例:</p><pre><code>[11:42:19 root@centos7[ ~]#echo &#39;today is date&#39;today is date#单引号里的内容,看到是什么就输出什么,即使有反引号也没用[12:48:31 root@centos7[ ~]#echo &#39;today is `date`&#39;today is `date`#用双引号引起来,里面是变量或者被反向单引号引起来的命令时,会先将变量或者命令解析成具体内容[12:48:39 root@centos7[ ~]#echo &quot;today is `date`&quot;today is Tue Dec 22 12:51:11 CST 2020</code></pre><h3 id="变量定义的技巧及注意事项："><a href="#变量定义的技巧及注意事项：" class="headerlink" title="变量定义的技巧及注意事项："></a>变量定义的技巧及注意事项：</h3><ul><li><p>注意命令变量内容前后的字符&#96;&#96;（此字符为键盘Tab键上面的那个反引号，不是单引号），例如：“CMD&#x3D;<code>ls</code>”。</p></li><li><p>在变量名前加$可以取得该变量的值，使用echo或printf命令可以显示变量的值，$A和${A}的写法不同，但效果是一样的。</p></li><li><p>用echo等命令输出变量的时候，也可用单引号、双引号、反引号，例如：echo$A、echo “$A”、echo ‘$A’，它们的用法和前面变量内容定义的总结是一致的。</p></li><li><p>$dbname_tname，当变量后面连接有其他字符的时候，必须给变量加上大括号{}，例如：$dbname_tname就要改成${dbname}_tname。</p><h4 id="查看shell版本"><a href="#查看shell版本" class="headerlink" title="查看shell版本"></a>查看shell版本</h4><pre><code>#ubuntu的默认shell版本为5.0root@ubuntu2004:~# bash --versionGNU bash, version 5.0.17(1)-release (x86_64-pc-linux-gnu)Copyright (C) 2019 Free Software Foundation, Inc.License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;</code></pre></li></ul><p>This is free software; you are free to change and redistribute it.There is NO WARRANTY, to the extent permitted by law.</p><pre><code>## ## *位置变量:位置变量的用法:- 切换到PATH环境变量路径- 用vim编辑文件,- $1,$2一直到$n为位置变量,从$10开始要用&#123;&#125; 括起来如:$&#123;10&#125;- $*为全部参数合成一个字符串 ,即一个整体- $@  将每个参数视为独立字符串,这是将多参数传递给其他程序的最佳方式- $#传递给脚本的参数的个数- $0 脚本名称,包括路径注意:$@和$*只有在被双引号抱起来的时候才会有差异如果一个参数超过两个字符,要加&#123;&#125;```bash[root@ubuntu2004 ~]#cd /usr/local/bin/  [root@ubuntu2004 /usr/local/bin]#vim arg.sh  [root@ubuntu2004 /usr/local/bin]#cat arg.sh #!/bin/bashecho 1st arg is $1     echo 2st arg is $2     echo 3st arg is $3echo 10st arg is $&#123;10&#125;echo All args are $*      echo All args are $@     echo The arg number is $#    echo The scriptname is $(basename $0) #只要文件名命令为basename,前面的$为引用变量#给脚本赋值参数,自动把脚本后面跟的参数赋值 $1,$2...$n,没有参数则不输出[root@ubuntu2004 /usr/local/bin]#bash arg.sh 1 2 3  1st arg is 1                                         2st arg is 2                                        3st arg is 310st arg isAll args are 1 2 3All args are 1 2 3The arg number is 3The scriptname is arg.sh[root@ubuntu2004 /usr/local/bin]#</code></pre><p>范例:$0,$#,$n和多个参数</p><pre><code>[08:57:39 root@centosmini[ ~]#cat e.sh#!/bin/bashecho $0echo $1 $2 $3 $4echo $#echo $*#给脚本从a到z 26个参数,$#说明传入了26个参数[08:56:39 root@centosmini[ ~]#sh e.sh &#123;a..z&#125;e.sha b c d26a b c d e f g h i j k l m n o p q r s t u v w x y z#多个参数[09:26:30 root@centosmini[ ~]#vim test.shecho $1 $2 $3 $4 $5 $6 $7 $8 $9 $10 $11 $12 $13 $14 $15  #$10之后的未加&#123;&#125;,输出内容不对了[09:26:12 root@centosmini[ ~]#sh test.sh &#123;a..z&#125;a b c d e f g h i a0 a1 a2 a3 a4 a5</code></pre><h3 id="0特殊变量的作用"><a href="#0特殊变量的作用" class="headerlink" title="$0特殊变量的作用"></a>$0特殊变量的作用</h3><p>$0的作用为取出执行脚本的名称（包括路径）</p><h4 id="范例：获取脚本的名称及路径"><a href="#范例：获取脚本的名称及路径" class="headerlink" title="范例：获取脚本的名称及路径"></a>范例：获取脚本的名称及路径</h4><pre><code>#若不带路径执行脚本，那么输出结果就是脚本的名字[09:41:24 root@centosmini[ ~]#vim test.shecho $0#若使用全路径执行脚本，那么输出结果就是全路径加上脚本的名字[09:42:07 root@centosmini[ ~]#sh /root/test.sh /root/test.sh#当要执行的脚本为全路径时，$0也会带着路径。此时如果希望单独获取名称或路径，可以用dirname和basename命令[09:44:41 root@centosmini[ ~]#dirname /root/test.sh /root[09:44:57 root@centosmini[ ~]#basename /root/test.sh test.sh</code></pre><h4 id="范例-利用-0和dirname-basename分别取出脚本名称和脚本路径"><a href="#范例-利用-0和dirname-basename分别取出脚本名称和脚本路径" class="headerlink" title="范例:利用$0和dirname,basename分别取出脚本名称和脚本路径"></a>范例:利用$0和dirname,basename分别取出脚本名称和脚本路径</h4><pre><code>[09:50:03 root@centosmini[ ~]#cat test.sh basename $0dirname  $0[09:49:59 root@centosmini[ ~]#sh /root/test.sh test.sh/root</code></pre><h4 id="范例-根据用户在命令行的传参个数判断用户的输入，不合要求的给予提示并退出。"><a href="#范例-根据用户在命令行的传参个数判断用户的输入，不合要求的给予提示并退出。" class="headerlink" title="范例:根据用户在命令行的传参个数判断用户的输入，不合要求的给予提示并退出。"></a>范例:根据用户在命令行的传参个数判断用户的输入，不合要求的给予提示并退出。</h4><pre><code>#方法一:如果参数个数不等于2个,则给与提示并退出返回值1,[09:59:30 root@centosmini[ ~]#vim test.sh[ $# != 2 ] &amp;&amp; &#123;              echo &quot;请输入两个数&quot;              exit 1              &#125;       echo &quot;welcome biejing&quot;   #给两个参数则输出后面的字符[09:59:10 root@centosmini[ ~]#sh test.sh wo dewelcome biejing#方法二:用if判断输入的参数不等于2个时,提示脚本路径及名称和参数个数,并退出[10:09:10 root@centosmini[ ~]#vim test.shif [ $# != 2 ]                                                                                                                   then   echo &quot;usage:/root/ $0 ager1 ager2&quot;   exit 1fiecho $1 $2[10:09:00 root@centosmini[ ~]#sh test.sh wo dewo de[10:09:01 root@centosmini[ ~]#sh test.sh usage:/root/ test.sh ager1 ager2</code></pre><h3 id="特殊位置变量"><a href="#特殊位置变量" class="headerlink" title="$?特殊位置变量"></a>$?特殊位置变量</h3><p>获取执行上一个指令的返回值(0为成功,其他值为失败)不同命令的执行结果中，“$? ”的返回值不尽相同，但在工作场景中，常用的就是0和非0两种状态，0表示成功运行，非0表示运行失败。</p><pre><code>#echo查看返回值[10:17:07 root@centosmini[ ~]#name=&quot;I am lower&quot;[10:27:44 root@centosmini[ ~]#echo $nameI am lower[10:27:51 root@centosmini[ ~]#echo $?0</code></pre><p>在企业场景下，“$? ”返回值的用法如下：1）判断命令、脚本或函数等程序是否执行成功。2）若在脚本中调用执行“exit 数字”，则会返回这个数字给“$? ”变量。3）如果是在函数里，则通过“return 数字”把这个数字以函数返回值的形式传给“$? ”。</p><h3 id="特殊变量-不常用"><a href="#特殊变量-不常用" class="headerlink" title="$$特殊变量(不常用)"></a>$$特殊变量(不常用)</h3><p>获取脚本执行的进程号（PID)</p><h2 id="Shell变量子串"><a href="#Shell变量子串" class="headerlink" title="Shell变量子串"></a>Shell变量子串</h2><p>第二个比较常用</p><h4 id="范例-返回变量值的长度"><a href="#范例-返回变量值的长度" class="headerlink" title="范例:返回变量值的长度*"></a>范例:返回变量值的长度*</h4><pre><code>#定义变量,打印变量内容[10:17:07 root@centosmini[ ~]#name=&quot;I am lower&quot;[10:27:44 root@centosmini[ ~]#echo $nameI am lower#打印变量的长度[10:48:46 root@centosmini[ ~]#echo $</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;shell脚本创建过程&quot;&gt;&lt;a href=&quot;#shell脚本创建过程&quot; class=&quot;headerlink&quot; title=&quot;shell脚本创建过程&quot;&gt;&lt;/a&gt;shell脚本创建过程&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;第一行必须包括shell声明序列 #!&lt;/p&gt;
&lt;</summary>
      
    
    
    
    
    <category term="shell" scheme="http://example.com/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2022/12/27/hello-world/"/>
    <id>http://example.com/2022/12/27/hello-world/</id>
    <published>2022-12-27T04:41:53.725Z</published>
    <updated>2022-12-27T04:41:53.725Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
